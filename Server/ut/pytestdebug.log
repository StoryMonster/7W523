versions pytest-5.0.1, py-1.8.0, python-3.7.3.final.0
cwd=D:\projects\7W523\Server\ut
args=['-v', '--debug', '--log-level=DEBUG']

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x0000024543256D30>
    pytest_plugin_registered [hook]
        plugin: <Session ut exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x0000024543256D30>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x00000245433A8710>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x0000024543398400>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x00000245433A88D0>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: py._io [assertion]
    early skip of rewriting module: py._io.terminalwriter [assertion]
    early skip of rewriting module: unicodedata [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x0000024543256D30>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\mark\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=8 _state='suspended'> err=<FDCapture 2 oldfd=9 _state='suspended'> in_=<FDCapture 0 oldfd=6 _state='started'> _state='suspended' _in_suspended='<UNSET>'> _current_item=None>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x00000245433A8710>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x0000024543398400>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x00000245433A88D0>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x00000245433A8E10>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x00000245433C27F0>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x0000024543256D30>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\mark\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=8 _state='suspended'> err=<FDCapture 2 oldfd=9 _state='suspended'> in_=<FDCapture 0 oldfd=6 _state='started'> _state='suspended' _in_suspended='<UNSET>'> _current_item=None>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x00000245433A8710>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x0000024543398400>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x00000245433A88D0>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x00000245433A8E10>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x00000245433C27F0>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x00000245433C2D68>
          manager: <_pytest.config.PytestPluginManager object at 0x00000245425C35F8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x0000024543256D30>
          startdir: D:\projects\7W523\Server\ut
      finish pytest_report_header --> [['rootdir: D:\\projects\\7W523\\Server\\ut'], 'cachedir: .pytest_cache', ['using: pytest-5.0.1 pylib-1.8.0']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['D:\\projects\\7W523\\Server\\ut'] [collection]
        pytest_collectstart [hook]
            collector: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument D:\projects\7W523\Server\ut [collection]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\.pytest_cache
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
          early skip of rewriting module: py._code [assertion]
          early skip of rewriting module: py._code.code [assertion]
          early skip of rewriting module: repr [assertion]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\cards
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: D:\projects\7W523\Server\ut\cards
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\logs
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: D:\projects\7W523\Server\ut\logs
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\procedures
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: D:\projects\7W523\Server\ut\procedures
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\pytestdebug.log
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\projects\7W523\Server\ut\pytestdebug.log
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\cards\test_card_heap.py
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\projects\7W523\Server\ut\cards\test_card_heap.py
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: D:\projects\7W523\Server\ut\cards\test_card_heap.py
                  parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module cards/test_card_heap.py> [hook]
            finish pytest_collect_file --> [<Module cards/test_card_heap.py>] [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\procedures\events
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: D:\projects\7W523\Server\ut\procedures\events
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\procedures\test_client_global_procedure.py
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\projects\7W523\Server\ut\procedures\test_client_global_procedure.py
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: D:\projects\7W523\Server\ut\procedures\test_client_global_procedure.py
                  parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module procedures/test_client_global_procedure.py> [hook]
            finish pytest_collect_file --> [<Module procedures/test_client_global_procedure.py>] [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\procedures\test_in_game_procedure.py
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\projects\7W523\Server\ut\procedures\test_in_game_procedure.py
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: D:\projects\7W523\Server\ut\procedures\test_in_game_procedure.py
                  parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module procedures/test_in_game_procedure.py> [hook]
            finish pytest_collect_file --> [<Module procedures/test_in_game_procedure.py>] [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\procedures\test_post_game_procedure.py
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\projects\7W523\Server\ut\procedures\test_post_game_procedure.py
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: D:\projects\7W523\Server\ut\procedures\test_post_game_procedure.py
                  parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module procedures/test_post_game_procedure.py> [hook]
            finish pytest_collect_file --> [<Module procedures/test_post_game_procedure.py>] [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\procedures\test_pre_game_procedure.py
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\projects\7W523\Server\ut\procedures\test_pre_game_procedure.py
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: D:\projects\7W523\Server\ut\procedures\test_pre_game_procedure.py
                  parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module procedures/test_pre_game_procedure.py> [hook]
            finish pytest_collect_file --> [<Module procedures/test_pre_game_procedure.py>] [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\procedures\test_wait_room_choose_procedure.py
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\projects\7W523\Server\ut\procedures\test_wait_room_choose_procedure.py
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: D:\projects\7W523\Server\ut\procedures\test_wait_room_choose_procedure.py
                  parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module procedures/test_wait_room_choose_procedure.py> [hook]
            finish pytest_collect_file --> [<Module procedures/test_wait_room_choose_procedure.py>] [hook]
            pytest_ignore_collect [hook]
                path: D:\projects\7W523\Server\ut\procedures\events\event_fixtures.py
                config: <_pytest.config.Config object at 0x0000024543256D30>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: D:\projects\7W523\Server\ut\procedures\events\event_fixtures.py
                parent: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=6 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=6 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module cards/test_card_heap.py> [collection]
      pytest_collectstart [hook]
          collector: <Module cards/test_card_heap.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module cards/test_card_heap.py>
      find_module called for: test_card_heap [assertion]
      matched test file 'D:\\projects\\7W523\\Server\\ut\\cards\\test_card_heap.py' [assertion]
      found cached rewritten pyc for 'D:\\projects\\7W523\\Server\\ut\\cards\\test_card_heap.py' [assertion]
      early skip of rewriting module: cards [assertion]
      early skip of rewriting module: cards.card_heap [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __name__
            obj: test_card_heap
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __spec__
            obj: ModuleSpec(name='test_card_heap', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>, origin='D:\\projects\\7W523\\Server\\ut\\cards\\test_card_heap.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __file__
            obj: D:\projects\7W523\Server\ut\cards\test_card_heap.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __cached__
            obj: D:\projects\7W523\Server\ut\cards\__pycache__\test_card_heap.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'WindowsError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-Z plus Return to exit, 'exit': Use exit() or Ctrl-Z plus Return to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: pytest
            obj: <module 'pytest' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: CardHeap
            obj: <class 'cards.card_heap.CardHeap'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: cardheap
            obj: <function cardheap at 0x00000245433F6AE8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: test_get_cards
            obj: <function test_get_cards at 0x00000245433F6D90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x00000245433FEE80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_cards>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x00007FFF5A512820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module cards/test_card_heap.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'cards/test_card_heap.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_get_cards> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_cards>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'cards/test_card_heap.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module procedures/test_client_global_procedure.py> [collection]
      pytest_collectstart [hook]
          collector: <Module procedures/test_client_global_procedure.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module procedures/test_client_global_procedure.py>
      find_module called for: test_client_global_procedure [assertion]
      matched test file 'D:\\projects\\7W523\\Server\\ut\\procedures\\test_client_global_procedure.py' [assertion]
      found cached rewritten pyc for 'D:\\projects\\7W523\\Server\\ut\\procedures\\test_client_global_procedure.py' [assertion]
      early skip of rewriting module: procedures [assertion]
      early skip of rewriting module: procedures.client_global_procedure [assertion]
      early skip of rewriting module: fsm [assertion]
      early skip of rewriting module: fsm.fsm [assertion]
      early skip of rewriting module: fsm.fsm_exceptions [assertion]
      early skip of rewriting module: fsm.state [assertion]
      early skip of rewriting module: fsm.event [assertion]
      early skip of rewriting module: procedures.wait_room_choose_procedure [assertion]
      early skip of rewriting module: procedures.client_events [assertion]
      early skip of rewriting module: messages [assertion]
      early skip of rewriting module: messages.out_msgs [assertion]
      early skip of rewriting module: procedures.pre_game_procedure [assertion]
      early skip of rewriting module: procedures.in_game_procedure [assertion]
      early skip of rewriting module: procedures.post_game_procedure [assertion]
      early skip of rewriting module: events [assertion]
      early skip of rewriting module: events.event_fixtures [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __name__
            obj: test_client_global_procedure
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __spec__
            obj: ModuleSpec(name='test_client_global_procedure', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>, origin='D:\\projects\\7W523\\Server\\ut\\procedures\\test_client_global_procedure.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __file__
            obj: D:\projects\7W523\Server\ut\procedures\test_client_global_procedure.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __cached__
            obj: D:\projects\7W523\Server\ut\procedures\__pycache__\test_client_global_procedure.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'WindowsError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-Z plus Return to exit, 'exit': Use exit() or Ctrl-Z plus Return to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: pytest
            obj: <module 'pytest' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: ClientGlobalProcedure
            obj: <class 'procedures.client_global_procedure.ClientGlobalProcedure'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: FsmEvent
            obj: <class 'fsm.event.FsmEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: EnterRoomEvent
            obj: <class 'procedures.client_events.EnterRoomEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: LeaveRoomEvent
            obj: <class 'procedures.client_events.LeaveRoomEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: AllPlayersReadyEvent
            obj: <class 'procedures.client_events.AllPlayersReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: OnePlayerReadyEvent
            obj: <class 'procedures.client_events.OnePlayerReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: OnePlayerNotReadyEvent
            obj: <class 'procedures.client_events.OnePlayerNotReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: OnePlayerJoinEvent
            obj: <class 'procedures.client_events.OnePlayerJoinEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: OnePlayerLeaveEvent
            obj: <class 'procedures.client_events.OnePlayerLeaveEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: ReplayEvent
            obj: <class 'procedures.client_events.ReplayEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: PreGameEvent
            obj: <class 'procedures.client_events.PreGameEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: GameOverEvent
            obj: <class 'procedures.client_events.GameOverEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: GameStartEvent
            obj: <class 'procedures.client_events.GameStartEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: TurnToNextPlayerDealEvent
            obj: <class 'procedures.client_events.TurnToNextPlayerDealEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: DispatchCardsEvent
            obj: <class 'procedures.client_events.DispatchCardsEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: LogoutEvent
            obj: <class 'procedures.client_events.LogoutEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: OfflineEvent
            obj: <class 'procedures.client_events.OfflineEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: PassEvent
            obj: <class 'procedures.client_events.PassEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: DealEvent
            obj: <class 'procedures.client_events.DealEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: onePlayerReadyEvent
            obj: <function onePlayerReadyEvent at 0x0000024543446268>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: onePlayerNotReadyEvent
            obj: <function onePlayerNotReadyEvent at 0x0000024543446488>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: allPlayersReadyEvent
            obj: <function allPlayersReadyEvent at 0x0000024543446598>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: onePlayerJoinEvent
            obj: <function onePlayerJoinEvent at 0x00000245434466A8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: onePlayerLeaveEvent
            obj: <function onePlayerLeaveEvent at 0x00000245434467B8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: replayEvent
            obj: <function replayEvent at 0x00000245434468C8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: turnToNextPlayerDealEvent
            obj: <function turnToNextPlayerDealEvent at 0x00000245434469D8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: dispatchCardsEvent
            obj: <function dispatchCardsEvent at 0x0000024543446AE8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: offlineEvent
            obj: <function offlineEvent at 0x0000024543446BF8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: logoutEvent
            obj: <function logoutEvent at 0x0000024543446D08>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: preGameEvent
            obj: <function preGameEvent at 0x0000024543446E18>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: gameStartEvent
            obj: <function gameStartEvent at 0x0000024543446F28>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: leaveRoomEvent
            obj: <function leaveRoomEvent at 0x000002454344C0D0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: gameOverEvent
            obj: <function gameOverEvent at 0x000002454344C1E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: dealEvent
            obj: <function dealEvent at 0x000002454344C2F0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: passEvent
            obj: <function passEvent at 0x000002454344C400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: dealTimeoutEvent
            obj: <function dealTimeoutEvent at 0x000002454344C510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: enterRoomEvent
            obj: <function enterRoomEvent at 0x000002454344C620>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: clientGlobalProcedure
            obj: <function clientGlobalProcedure at 0x000002454344C6A8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: test_received_logout_event
            obj: <function test_received_logout_event at 0x000002454344C730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000024543448D68>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_logout_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: test_received_offline_event
            obj: <function test_received_offline_event at 0x000002454344C7B8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000024543448DD8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_offline_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: test_normal_client_running_procedure
            obj: <function test_normal_client_running_procedure at 0x000002454344C840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002454345A2B0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_normal_client_running_procedure>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x00007FFF5A512820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_client_global_procedure.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'procedures/test_client_global_procedure.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_received_logout_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_logout_event>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_received_offline_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_offline_event>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_normal_client_running_procedure> [collection]
      pytest_itemcollected [hook]
          item: <Function test_normal_client_running_procedure>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'procedures/test_client_global_procedure.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module procedures/test_in_game_procedure.py> [collection]
      pytest_collectstart [hook]
          collector: <Module procedures/test_in_game_procedure.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module procedures/test_in_game_procedure.py>
      find_module called for: test_in_game_procedure [assertion]
      matched test file 'D:\\projects\\7W523\\Server\\ut\\procedures\\test_in_game_procedure.py' [assertion]
      found cached rewritten pyc for 'D:\\projects\\7W523\\Server\\ut\\procedures\\test_in_game_procedure.py' [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __name__
            obj: test_in_game_procedure
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __spec__
            obj: ModuleSpec(name='test_in_game_procedure', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>, origin='D:\\projects\\7W523\\Server\\ut\\procedures\\test_in_game_procedure.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __file__
            obj: D:\projects\7W523\Server\ut\procedures\test_in_game_procedure.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __cached__
            obj: D:\projects\7W523\Server\ut\procedures\__pycache__\test_in_game_procedure.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'WindowsError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-Z plus Return to exit, 'exit': Use exit() or Ctrl-Z plus Return to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: pytest
            obj: <module 'pytest' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: FSM
            obj: <class 'fsm.fsm.FSM'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: FsmFinalState
            obj: <class 'fsm.state.FsmFinalState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: FsmState
            obj: <class 'fsm.state.FsmState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: DefaultInitState
            obj: <class 'fsm.state.DefaultInitState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: TurnToNextPlayerDealEvent
            obj: <class 'procedures.client_events.TurnToNextPlayerDealEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: DispatchCardsEvent
            obj: <class 'procedures.client_events.DispatchCardsEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: PassEvent
            obj: <class 'procedures.client_events.PassEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: DealEvent
            obj: <class 'procedures.client_events.DealEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: OutMsgs
            obj: <enum 'OutMsgs'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: logging
            obj: <module 'logging' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\logging\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: send_message
            obj: <function send_message at 0x00000245434398C8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: GamingState
            obj: <class 'procedures.in_game_procedure.GamingState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: InGameProcedure
            obj: <class 'procedures.in_game_procedure.InGameProcedure'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: FsmEvent
            obj: <class 'fsm.event.FsmEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: EnterRoomEvent
            obj: <class 'procedures.client_events.EnterRoomEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: LeaveRoomEvent
            obj: <class 'procedures.client_events.LeaveRoomEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: AllPlayersReadyEvent
            obj: <class 'procedures.client_events.AllPlayersReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: OnePlayerReadyEvent
            obj: <class 'procedures.client_events.OnePlayerReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: OnePlayerNotReadyEvent
            obj: <class 'procedures.client_events.OnePlayerNotReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: OnePlayerJoinEvent
            obj: <class 'procedures.client_events.OnePlayerJoinEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: OnePlayerLeaveEvent
            obj: <class 'procedures.client_events.OnePlayerLeaveEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: ReplayEvent
            obj: <class 'procedures.client_events.ReplayEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: PreGameEvent
            obj: <class 'procedures.client_events.PreGameEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: GameOverEvent
            obj: <class 'procedures.client_events.GameOverEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: GameStartEvent
            obj: <class 'procedures.client_events.GameStartEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: LogoutEvent
            obj: <class 'procedures.client_events.LogoutEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: OfflineEvent
            obj: <class 'procedures.client_events.OfflineEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: onePlayerReadyEvent
            obj: <function onePlayerReadyEvent at 0x0000024543446268>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: onePlayerNotReadyEvent
            obj: <function onePlayerNotReadyEvent at 0x0000024543446488>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: allPlayersReadyEvent
            obj: <function allPlayersReadyEvent at 0x0000024543446598>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: onePlayerJoinEvent
            obj: <function onePlayerJoinEvent at 0x00000245434466A8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: onePlayerLeaveEvent
            obj: <function onePlayerLeaveEvent at 0x00000245434467B8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: replayEvent
            obj: <function replayEvent at 0x00000245434468C8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: turnToNextPlayerDealEvent
            obj: <function turnToNextPlayerDealEvent at 0x00000245434469D8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: dispatchCardsEvent
            obj: <function dispatchCardsEvent at 0x0000024543446AE8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: offlineEvent
            obj: <function offlineEvent at 0x0000024543446BF8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: logoutEvent
            obj: <function logoutEvent at 0x0000024543446D08>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: preGameEvent
            obj: <function preGameEvent at 0x0000024543446E18>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: gameStartEvent
            obj: <function gameStartEvent at 0x0000024543446F28>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: leaveRoomEvent
            obj: <function leaveRoomEvent at 0x000002454344C0D0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: gameOverEvent
            obj: <function gameOverEvent at 0x000002454344C1E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: dealEvent
            obj: <function dealEvent at 0x000002454344C2F0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: passEvent
            obj: <function passEvent at 0x000002454344C400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: dealTimeoutEvent
            obj: <function dealTimeoutEvent at 0x000002454344C510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: enterRoomEvent
            obj: <function enterRoomEvent at 0x000002454344C620>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: inGameProcedure
            obj: <function inGameProcedure at 0x000002454344CBF8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: test_received_dispatch_cards_event
            obj: <function test_received_dispatch_cards_event at 0x000002454344CC80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000024543461048>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_dispatch_cards_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: test_received_turn_to_next_player_deal_event
            obj: <function test_received_turn_to_next_player_deal_event at 0x000002454344CD08>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000024543461278>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_turn_to_next_player_deal_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: test_received_pass_event
            obj: <function test_received_pass_event at 0x000002454344CD90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000024543461518>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_pass_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: test_received_deal_event
            obj: <function test_received_deal_event at 0x000002454344CE18>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000024543461828>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_deal_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: test_received_deal_timeout_event
            obj: <function test_received_deal_timeout_event at 0x000002454344CEA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000024543461B38>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_deal_timeout_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x00007FFF5A512820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_in_game_procedure.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'procedures/test_in_game_procedure.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_received_dispatch_cards_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_dispatch_cards_event>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_received_turn_to_next_player_deal_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_turn_to_next_player_deal_event>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_received_pass_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_pass_event>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_received_deal_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_deal_event>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_received_deal_timeout_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_deal_timeout_event>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'procedures/test_in_game_procedure.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module procedures/test_post_game_procedure.py> [collection]
      pytest_collectstart [hook]
          collector: <Module procedures/test_post_game_procedure.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module procedures/test_post_game_procedure.py>
      find_module called for: test_post_game_procedure [assertion]
      matched test file 'D:\\projects\\7W523\\Server\\ut\\procedures\\test_post_game_procedure.py' [assertion]
      found cached rewritten pyc for 'D:\\projects\\7W523\\Server\\ut\\procedures\\test_post_game_procedure.py' [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __name__
            obj: test_post_game_procedure
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __spec__
            obj: ModuleSpec(name='test_post_game_procedure', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>, origin='D:\\projects\\7W523\\Server\\ut\\procedures\\test_post_game_procedure.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __file__
            obj: D:\projects\7W523\Server\ut\procedures\test_post_game_procedure.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __cached__
            obj: D:\projects\7W523\Server\ut\procedures\__pycache__\test_post_game_procedure.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'WindowsError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-Z plus Return to exit, 'exit': Use exit() or Ctrl-Z plus Return to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: pytest
            obj: <module 'pytest' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: FSM
            obj: <class 'fsm.fsm.FSM'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: FsmFinalState
            obj: <class 'fsm.state.FsmFinalState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: FsmState
            obj: <class 'fsm.state.FsmState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: DefaultInitState
            obj: <class 'fsm.state.DefaultInitState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: ReplayEvent
            obj: <class 'procedures.client_events.ReplayEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: logging
            obj: <module 'logging' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\logging\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: ReplayState
            obj: <class 'procedures.post_game_procedure.ReplayState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: PostGameProcedure
            obj: <class 'procedures.post_game_procedure.PostGameProcedure'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: FsmEvent
            obj: <class 'fsm.event.FsmEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: EnterRoomEvent
            obj: <class 'procedures.client_events.EnterRoomEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: LeaveRoomEvent
            obj: <class 'procedures.client_events.LeaveRoomEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: AllPlayersReadyEvent
            obj: <class 'procedures.client_events.AllPlayersReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: OnePlayerReadyEvent
            obj: <class 'procedures.client_events.OnePlayerReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: OnePlayerNotReadyEvent
            obj: <class 'procedures.client_events.OnePlayerNotReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: OnePlayerJoinEvent
            obj: <class 'procedures.client_events.OnePlayerJoinEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: OnePlayerLeaveEvent
            obj: <class 'procedures.client_events.OnePlayerLeaveEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: PreGameEvent
            obj: <class 'procedures.client_events.PreGameEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: GameOverEvent
            obj: <class 'procedures.client_events.GameOverEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: GameStartEvent
            obj: <class 'procedures.client_events.GameStartEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: TurnToNextPlayerDealEvent
            obj: <class 'procedures.client_events.TurnToNextPlayerDealEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: DispatchCardsEvent
            obj: <class 'procedures.client_events.DispatchCardsEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: LogoutEvent
            obj: <class 'procedures.client_events.LogoutEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: OfflineEvent
            obj: <class 'procedures.client_events.OfflineEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: PassEvent
            obj: <class 'procedures.client_events.PassEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: DealEvent
            obj: <class 'procedures.client_events.DealEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: onePlayerReadyEvent
            obj: <function onePlayerReadyEvent at 0x0000024543446268>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: onePlayerNotReadyEvent
            obj: <function onePlayerNotReadyEvent at 0x0000024543446488>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: allPlayersReadyEvent
            obj: <function allPlayersReadyEvent at 0x0000024543446598>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: onePlayerJoinEvent
            obj: <function onePlayerJoinEvent at 0x00000245434466A8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: onePlayerLeaveEvent
            obj: <function onePlayerLeaveEvent at 0x00000245434467B8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: replayEvent
            obj: <function replayEvent at 0x00000245434468C8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: turnToNextPlayerDealEvent
            obj: <function turnToNextPlayerDealEvent at 0x00000245434469D8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: dispatchCardsEvent
            obj: <function dispatchCardsEvent at 0x0000024543446AE8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: offlineEvent
            obj: <function offlineEvent at 0x0000024543446BF8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: logoutEvent
            obj: <function logoutEvent at 0x0000024543446D08>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: preGameEvent
            obj: <function preGameEvent at 0x0000024543446E18>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: gameStartEvent
            obj: <function gameStartEvent at 0x0000024543446F28>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: leaveRoomEvent
            obj: <function leaveRoomEvent at 0x000002454344C0D0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: gameOverEvent
            obj: <function gameOverEvent at 0x000002454344C1E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: dealEvent
            obj: <function dealEvent at 0x000002454344C2F0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: passEvent
            obj: <function passEvent at 0x000002454344C400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: dealTimeoutEvent
            obj: <function dealTimeoutEvent at 0x000002454344C510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: enterRoomEvent
            obj: <function enterRoomEvent at 0x000002454344C620>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: postGameProcedure
            obj: <function postGameProcedure at 0x00000245434692F0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: test_received_replay_event
            obj: <function test_received_replay_event at 0x0000024543469378>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002454346C400>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_replay_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x00007FFF5A512820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_post_game_procedure.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'procedures/test_post_game_procedure.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_received_replay_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_replay_event>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'procedures/test_post_game_procedure.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module procedures/test_pre_game_procedure.py> [collection]
      pytest_collectstart [hook]
          collector: <Module procedures/test_pre_game_procedure.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module procedures/test_pre_game_procedure.py>
      find_module called for: test_pre_game_procedure [assertion]
      matched test file 'D:\\projects\\7W523\\Server\\ut\\procedures\\test_pre_game_procedure.py' [assertion]
      found cached rewritten pyc for 'D:\\projects\\7W523\\Server\\ut\\procedures\\test_pre_game_procedure.py' [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __name__
            obj: test_pre_game_procedure
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __spec__
            obj: ModuleSpec(name='test_pre_game_procedure', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>, origin='D:\\projects\\7W523\\Server\\ut\\procedures\\test_pre_game_procedure.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __file__
            obj: D:\projects\7W523\Server\ut\procedures\test_pre_game_procedure.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __cached__
            obj: D:\projects\7W523\Server\ut\procedures\__pycache__\test_pre_game_procedure.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'WindowsError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-Z plus Return to exit, 'exit': Use exit() or Ctrl-Z plus Return to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: pytest
            obj: <module 'pytest' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: FSM
            obj: <class 'fsm.fsm.FSM'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: DefaultInitState
            obj: <class 'fsm.state.DefaultInitState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: FsmState
            obj: <class 'fsm.state.FsmState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: FsmFinalState
            obj: <class 'fsm.state.FsmFinalState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: AllPlayersReadyEvent
            obj: <class 'procedures.client_events.AllPlayersReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: OnePlayerReadyEvent
            obj: <class 'procedures.client_events.OnePlayerReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: OnePlayerNotReadyEvent
            obj: <class 'procedures.client_events.OnePlayerNotReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: OnePlayerJoinEvent
            obj: <class 'procedures.client_events.OnePlayerJoinEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: OnePlayerLeaveEvent
            obj: <class 'procedures.client_events.OnePlayerLeaveEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: OutMsgs
            obj: <enum 'OutMsgs'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: logging
            obj: <module 'logging' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\logging\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: send_player_join_room_ind
            obj: <function send_player_join_room_ind at 0x0000024543439400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: send_player_leave_room_ind
            obj: <function send_player_leave_room_ind at 0x0000024543439378>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: send_player_ready_ind
            obj: <function send_player_ready_ind at 0x0000024543439488>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: send_player_not_ready_ind
            obj: <function send_player_not_ready_ind at 0x0000024543439510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: send_game_start_ind
            obj: <function send_game_start_ind at 0x0000024543439598>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: WaitForPlayersReadyState
            obj: <class 'procedures.pre_game_procedure.WaitForPlayersReadyState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: GameStartState
            obj: <class 'procedures.pre_game_procedure.GameStartState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: PreGameProcedure
            obj: <class 'procedures.pre_game_procedure.PreGameProcedure'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: FsmEvent
            obj: <class 'fsm.event.FsmEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: EnterRoomEvent
            obj: <class 'procedures.client_events.EnterRoomEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: LeaveRoomEvent
            obj: <class 'procedures.client_events.LeaveRoomEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: ReplayEvent
            obj: <class 'procedures.client_events.ReplayEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: PreGameEvent
            obj: <class 'procedures.client_events.PreGameEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: GameOverEvent
            obj: <class 'procedures.client_events.GameOverEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: GameStartEvent
            obj: <class 'procedures.client_events.GameStartEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: TurnToNextPlayerDealEvent
            obj: <class 'procedures.client_events.TurnToNextPlayerDealEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: DispatchCardsEvent
            obj: <class 'procedures.client_events.DispatchCardsEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: LogoutEvent
            obj: <class 'procedures.client_events.LogoutEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: OfflineEvent
            obj: <class 'procedures.client_events.OfflineEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: PassEvent
            obj: <class 'procedures.client_events.PassEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: DealEvent
            obj: <class 'procedures.client_events.DealEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: onePlayerReadyEvent
            obj: <function onePlayerReadyEvent at 0x0000024543446268>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: onePlayerNotReadyEvent
            obj: <function onePlayerNotReadyEvent at 0x0000024543446488>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: allPlayersReadyEvent
            obj: <function allPlayersReadyEvent at 0x0000024543446598>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: onePlayerJoinEvent
            obj: <function onePlayerJoinEvent at 0x00000245434466A8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: onePlayerLeaveEvent
            obj: <function onePlayerLeaveEvent at 0x00000245434467B8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: replayEvent
            obj: <function replayEvent at 0x00000245434468C8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: turnToNextPlayerDealEvent
            obj: <function turnToNextPlayerDealEvent at 0x00000245434469D8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: dispatchCardsEvent
            obj: <function dispatchCardsEvent at 0x0000024543446AE8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: offlineEvent
            obj: <function offlineEvent at 0x0000024543446BF8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: logoutEvent
            obj: <function logoutEvent at 0x0000024543446D08>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: preGameEvent
            obj: <function preGameEvent at 0x0000024543446E18>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: gameStartEvent
            obj: <function gameStartEvent at 0x0000024543446F28>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: leaveRoomEvent
            obj: <function leaveRoomEvent at 0x000002454344C0D0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: gameOverEvent
            obj: <function gameOverEvent at 0x000002454344C1E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: dealEvent
            obj: <function dealEvent at 0x000002454344C2F0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: passEvent
            obj: <function passEvent at 0x000002454344C400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: dealTimeoutEvent
            obj: <function dealTimeoutEvent at 0x000002454344C510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: enterRoomEvent
            obj: <function enterRoomEvent at 0x000002454344C620>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: pregameProcedure
            obj: <function pregameProcedure at 0x0000024543469598>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: test_received_one_player_ready_event
            obj: <function test_received_one_player_ready_event at 0x0000024543469620>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000024543461208>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_one_player_ready_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: test_received_one_player_not_ready_event
            obj: <function test_received_one_player_not_ready_event at 0x00000245434696A8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002454346CC88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_one_player_not_ready_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: test_received_one_player_join_event
            obj: <function test_received_one_player_join_event at 0x0000024543469730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002454346CE80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_one_player_join_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: test_received_one_player_leave_event
            obj: <function test_received_one_player_leave_event at 0x00000245434697B8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x00000245434730F0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_one_player_leave_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: test_received_all_players_ready_event
            obj: <function test_received_all_players_ready_event at 0x0000024543469840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000024543473320>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_all_players_ready_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x00007FFF5A512820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_pre_game_procedure.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'procedures/test_pre_game_procedure.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_received_one_player_ready_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_one_player_ready_event>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_received_one_player_not_ready_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_one_player_not_ready_event>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_received_one_player_join_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_one_player_join_event>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_received_one_player_leave_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_one_player_leave_event>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_received_all_players_ready_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_all_players_ready_event>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'procedures/test_pre_game_procedure.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module procedures/test_wait_room_choose_procedure.py> [collection]
      pytest_collectstart [hook]
          collector: <Module procedures/test_wait_room_choose_procedure.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module procedures/test_wait_room_choose_procedure.py>
      find_module called for: test_wait_room_choose_procedure [assertion]
      matched test file 'D:\\projects\\7W523\\Server\\ut\\procedures\\test_wait_room_choose_procedure.py' [assertion]
      found cached rewritten pyc for 'D:\\projects\\7W523\\Server\\ut\\procedures\\test_wait_room_choose_procedure.py' [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __name__
            obj: test_wait_room_choose_procedure
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __spec__
            obj: ModuleSpec(name='test_wait_room_choose_procedure', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x0000024543373208>, origin='D:\\projects\\7W523\\Server\\ut\\procedures\\test_wait_room_choose_procedure.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __file__
            obj: D:\projects\7W523\Server\ut\procedures\test_wait_room_choose_procedure.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __cached__
            obj: D:\projects\7W523\Server\ut\procedures\__pycache__\test_wait_room_choose_procedure.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'WindowsError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-Z plus Return to exit, 'exit': Use exit() or Ctrl-Z plus Return to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: FSM
            obj: <class 'fsm.fsm.FSM'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: FsmState
            obj: <class 'fsm.state.FsmState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: FsmFinalState
            obj: <class 'fsm.state.FsmFinalState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: DefaultInitState
            obj: <class 'fsm.state.DefaultInitState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: EnterRoomEvent
            obj: <class 'procedures.client_events.EnterRoomEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: OutMsgs
            obj: <enum 'OutMsgs'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: logging
            obj: <module 'logging' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\logging\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: send_room_info_ind
            obj: <function send_room_info_ind at 0x0000024543421EA0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: EnterRoomState
            obj: <class 'procedures.wait_room_choose_procedure.EnterRoomState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: WaitRoomChooseProcedure
            obj: <class 'procedures.wait_room_choose_procedure.WaitRoomChooseProcedure'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: FsmEvent
            obj: <class 'fsm.event.FsmEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: LeaveRoomEvent
            obj: <class 'procedures.client_events.LeaveRoomEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: AllPlayersReadyEvent
            obj: <class 'procedures.client_events.AllPlayersReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: OnePlayerReadyEvent
            obj: <class 'procedures.client_events.OnePlayerReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: OnePlayerNotReadyEvent
            obj: <class 'procedures.client_events.OnePlayerNotReadyEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: OnePlayerJoinEvent
            obj: <class 'procedures.client_events.OnePlayerJoinEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: OnePlayerLeaveEvent
            obj: <class 'procedures.client_events.OnePlayerLeaveEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: ReplayEvent
            obj: <class 'procedures.client_events.ReplayEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: PreGameEvent
            obj: <class 'procedures.client_events.PreGameEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: GameOverEvent
            obj: <class 'procedures.client_events.GameOverEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: GameStartEvent
            obj: <class 'procedures.client_events.GameStartEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: TurnToNextPlayerDealEvent
            obj: <class 'procedures.client_events.TurnToNextPlayerDealEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: DispatchCardsEvent
            obj: <class 'procedures.client_events.DispatchCardsEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: LogoutEvent
            obj: <class 'procedures.client_events.LogoutEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: OfflineEvent
            obj: <class 'procedures.client_events.OfflineEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: PassEvent
            obj: <class 'procedures.client_events.PassEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: DealEvent
            obj: <class 'procedures.client_events.DealEvent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: pytest
            obj: <module 'pytest' from 'c:\\users\\chend\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: onePlayerReadyEvent
            obj: <function onePlayerReadyEvent at 0x0000024543446268>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: onePlayerNotReadyEvent
            obj: <function onePlayerNotReadyEvent at 0x0000024543446488>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: allPlayersReadyEvent
            obj: <function allPlayersReadyEvent at 0x0000024543446598>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: onePlayerJoinEvent
            obj: <function onePlayerJoinEvent at 0x00000245434466A8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: onePlayerLeaveEvent
            obj: <function onePlayerLeaveEvent at 0x00000245434467B8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: replayEvent
            obj: <function replayEvent at 0x00000245434468C8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: turnToNextPlayerDealEvent
            obj: <function turnToNextPlayerDealEvent at 0x00000245434469D8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: dispatchCardsEvent
            obj: <function dispatchCardsEvent at 0x0000024543446AE8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: offlineEvent
            obj: <function offlineEvent at 0x0000024543446BF8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: logoutEvent
            obj: <function logoutEvent at 0x0000024543446D08>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: preGameEvent
            obj: <function preGameEvent at 0x0000024543446E18>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: gameStartEvent
            obj: <function gameStartEvent at 0x0000024543446F28>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: leaveRoomEvent
            obj: <function leaveRoomEvent at 0x000002454344C0D0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: gameOverEvent
            obj: <function gameOverEvent at 0x000002454344C1E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: dealEvent
            obj: <function dealEvent at 0x000002454344C2F0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: passEvent
            obj: <function passEvent at 0x000002454344C400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: dealTimeoutEvent
            obj: <function dealTimeoutEvent at 0x000002454344C510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: enterRoomEvent
            obj: <function enterRoomEvent at 0x000002454344C620>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: waitRoomChooseProcedure
            obj: <function waitRoomChooseProcedure at 0x0000024543469950>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: test_received_enter_room_event
            obj: <function test_received_enter_room_event at 0x00000245434698C8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000024543473AC8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_received_enter_room_event>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x00007FFF5A512820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module procedures/test_wait_room_choose_procedure.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'procedures/test_wait_room_choose_procedure.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_received_enter_room_event> [collection]
      pytest_itemcollected [hook]
          item: <Function test_received_enter_room_event>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'procedures/test_wait_room_choose_procedure.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x0000024543256D30>
          items: [<Function test_get_cards>, <Function test_received_logout_event>, <Function test_received_offline_event>, <Function test_normal_client_running_procedure>, <Function test_received_dispatch_cards_event>, <Function test_received_turn_to_next_player_deal_event>, <Function test_received_pass_event>, <Function test_received_deal_event>, <Function test_received_deal_timeout_event>, <Function test_received_replay_event>, <Function test_received_one_player_ready_event>, <Function test_received_one_player_not_ready_event>, <Function test_received_one_player_join_event>, <Function test_received_one_player_leave_event>, <Function test_received_all_players_ready_event>, <Function test_received_enter_room_event>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x0000024543256D30>
            startdir: D:\projects\7W523\Server\ut
            items: [<Function test_get_cards>, <Function test_received_logout_event>, <Function test_received_offline_event>, <Function test_normal_client_running_procedure>, <Function test_received_dispatch_cards_event>, <Function test_received_turn_to_next_player_deal_event>, <Function test_received_pass_event>, <Function test_received_deal_event>, <Function test_received_deal_timeout_event>, <Function test_received_replay_event>, <Function test_received_one_player_ready_event>, <Function test_received_one_player_not_ready_event>, <Function test_received_one_player_join_event>, <Function test_received_one_player_leave_event>, <Function test_received_all_players_ready_event>, <Function test_received_enter_room_event>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> [<Function test_get_cards>, <Function test_received_logout_event>, <Function test_received_offline_event>, <Function test_normal_client_running_procedure>, <Function test_received_dispatch_cards_event>, <Function test_received_turn_to_next_player_deal_event>, <Function test_received_pass_event>, <Function test_received_deal_event>, <Function test_received_deal_timeout_event>, <Function test_received_replay_event>, <Function test_received_one_player_ready_event>, <Function test_received_one_player_not_ready_event>, <Function test_received_one_player_join_event>, <Function test_received_one_player_leave_event>, <Function test_received_all_players_ready_event>, <Function test_received_enter_room_event>] [hook]
    pytest_runtestloop [hook]
        session: <Session ut exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=16>
      pytest_runtest_protocol [hook]
          item: <Function test_get_cards>
          nextitem: <Function test_received_logout_event>
        pytest_runtest_logstart [hook]
            nodeid: cards/test_card_heap.py::test_get_cards
            location: ('cards\\test_card_heap.py', 8, 'test_get_cards')
        early skip of rewriting module: py._io.capture [assertion]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_cards>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='cardheap' scope='function' baseid='cards/test_card_heap.py'>
              request: <SubRequest 'cardheap' for <Function test_get_cards>>
          finish pytest_fixture_setup --> <cards.card_heap.CardHeap object at 0x0000024543473C88> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_cards>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'cards/test_card_heap.py::test_get_cards' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'cards/test_card_heap.py::test_get_cards' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'cards/test_card_heap.py::test_get_cards' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_cards>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_cards>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_cards>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'cards/test_card_heap.py::test_get_cards' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'cards/test_card_heap.py::test_get_cards' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'cards/test_card_heap.py::test_get_cards' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_cards>
            nextitem: <Function test_received_logout_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='cardheap' scope='function' baseid='cards/test_card_heap.py'>
              request: <SubRequest 'cardheap' for <Function test_get_cards>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_cards>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'cards/test_card_heap.py::test_get_cards' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'cards/test_card_heap.py::test_get_cards' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'cards/test_card_heap.py::test_get_cards' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: cards/test_card_heap.py::test_get_cards
            location: ('cards\\test_card_heap.py', 8, 'test_get_cards')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_logout_event>
          nextitem: <Function test_received_offline_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_client_global_procedure.py::test_received_logout_event
            location: ('procedures\\test_client_global_procedure.py', 11, 'test_received_logout_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_logout_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='clientGlobalProcedure' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'clientGlobalProcedure' for <Function test_received_logout_event>>
          finish pytest_fixture_setup --> <procedures.client_global_procedure.ClientGlobalProcedure object at 0x0000024543473DD8> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='logoutEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'logoutEvent' for <Function test_received_logout_event>>
          finish pytest_fixture_setup --> <procedures.client_events.LogoutEvent object at 0x000002454346CE10> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='preGameEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'preGameEvent' for <Function test_received_logout_event>>
          finish pytest_fixture_setup --> <procedures.client_events.PreGameEvent object at 0x000002454346CC18> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_logout_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_client_global_procedure.py::test_received_logout_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_client_global_procedure.py::test_received_logout_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_client_global_procedure.py::test_received_logout_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_logout_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_logout_event>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_logout_event>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_client_global_procedure.py::test_received_logout_event' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_client_global_procedure.py::test_received_logout_event' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_client_global_procedure.py::test_received_logout_event' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_logout_event>
            nextitem: <Function test_received_offline_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='preGameEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'preGameEvent' for <Function test_received_logout_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='logoutEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'logoutEvent' for <Function test_received_logout_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='clientGlobalProcedure' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'clientGlobalProcedure' for <Function test_received_logout_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_logout_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_client_global_procedure.py::test_received_logout_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_client_global_procedure.py::test_received_logout_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_client_global_procedure.py::test_received_logout_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_client_global_procedure.py::test_received_logout_event
            location: ('procedures\\test_client_global_procedure.py', 11, 'test_received_logout_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_offline_event>
          nextitem: <Function test_normal_client_running_procedure>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_client_global_procedure.py::test_received_offline_event
            location: ('procedures\\test_client_global_procedure.py', 16, 'test_received_offline_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_offline_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='clientGlobalProcedure' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'clientGlobalProcedure' for <Function test_received_offline_event>>
          finish pytest_fixture_setup --> <procedures.client_global_procedure.ClientGlobalProcedure object at 0x0000024543473A58> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='offlineEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'offlineEvent' for <Function test_received_offline_event>>
          finish pytest_fixture_setup --> <procedures.client_events.OfflineEvent object at 0x000002454346CE80> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='preGameEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'preGameEvent' for <Function test_received_offline_event>>
          finish pytest_fixture_setup --> <procedures.client_events.PreGameEvent object at 0x000002454346CC88> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_offline_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_client_global_procedure.py::test_received_offline_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_client_global_procedure.py::test_received_offline_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_client_global_procedure.py::test_received_offline_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_offline_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_offline_event>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_offline_event>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_client_global_procedure.py::test_received_offline_event' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_client_global_procedure.py::test_received_offline_event' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_client_global_procedure.py::test_received_offline_event' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_offline_event>
            nextitem: <Function test_normal_client_running_procedure>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='preGameEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'preGameEvent' for <Function test_received_offline_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='offlineEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'offlineEvent' for <Function test_received_offline_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='clientGlobalProcedure' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'clientGlobalProcedure' for <Function test_received_offline_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_offline_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_client_global_procedure.py::test_received_offline_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_client_global_procedure.py::test_received_offline_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_client_global_procedure.py::test_received_offline_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_client_global_procedure.py::test_received_offline_event
            location: ('procedures\\test_client_global_procedure.py', 16, 'test_received_offline_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_normal_client_running_procedure>
          nextitem: <Function test_received_dispatch_cards_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_client_global_procedure.py::test_normal_client_running_procedure
            location: ('procedures\\test_client_global_procedure.py', 21, 'test_normal_client_running_procedure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_normal_client_running_procedure>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='clientGlobalProcedure' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'clientGlobalProcedure' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_global_procedure.ClientGlobalProcedure object at 0x000002454346CC88> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='enterRoomEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'enterRoomEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.EnterRoomEvent object at 0x000002454347D470> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='preGameEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'preGameEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.PreGameEvent object at 0x000002454347D5C0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='onePlayerReadyEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'onePlayerReadyEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.OnePlayerReadyEvent object at 0x000002454347D630> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='allPlayersReadyEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'allPlayersReadyEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.AllPlayersReadyEvent object at 0x000002454347D6D8> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='gameStartEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'gameStartEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.GameStartEvent object at 0x000002454347D748> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.DispatchCardsEvent object at 0x000002454347D7B8> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='turnToNextPlayerDealEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'turnToNextPlayerDealEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.TurnToNextPlayerDealEvent object at 0x000002454347D828> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dealEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'dealEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.DealEvent object at 0x000002454347D898> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='passEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'passEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.PassEvent object at 0x000002454347D8D0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='gameOverEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'gameOverEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.GameOverEvent object at 0x000002454347D940> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='leaveRoomEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'leaveRoomEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.LeaveRoomEvent object at 0x000002454347D9B0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='logoutEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'logoutEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_setup --> <procedures.client_events.LogoutEvent object at 0x000002454347DA20> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_normal_client_running_procedure>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_client_global_procedure.py::test_normal_client_running_procedure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_client_global_procedure.py::test_normal_client_running_procedure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_client_global_procedure.py::test_normal_client_running_procedure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_normal_client_running_procedure>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_normal_client_running_procedure>
        pytest_runtest_makereport [hook]
            item: <Function test_normal_client_running_procedure>
            call: <CallInfo when='call' exception: 'server'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_client_global_procedure.py::test_normal_client_running_procedure' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_client_global_procedure.py::test_normal_client_running_procedure' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_client_global_procedure.py::test_normal_client_running_procedure' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_normal_client_running_procedure>
            call: <CallInfo when='call' exception: 'server'>
            report: <TestReport 'procedures/test_client_global_procedure.py::test_normal_client_running_procedure' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_normal_client_running_procedure>
            nextitem: <Function test_received_dispatch_cards_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='logoutEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'logoutEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='leaveRoomEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'leaveRoomEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='gameOverEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'gameOverEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='passEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'passEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dealEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'dealEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='turnToNextPlayerDealEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'turnToNextPlayerDealEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='gameStartEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'gameStartEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='allPlayersReadyEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'allPlayersReadyEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='onePlayerReadyEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'onePlayerReadyEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='preGameEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'preGameEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='enterRoomEvent' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'enterRoomEvent' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='clientGlobalProcedure' scope='function' baseid='procedures/test_client_global_procedure.py'>
              request: <SubRequest 'clientGlobalProcedure' for <Function test_normal_client_running_procedure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_normal_client_running_procedure>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_client_global_procedure.py::test_normal_client_running_procedure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_client_global_procedure.py::test_normal_client_running_procedure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_client_global_procedure.py::test_normal_client_running_procedure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_client_global_procedure.py::test_normal_client_running_procedure
            location: ('procedures\\test_client_global_procedure.py', 21, 'test_normal_client_running_procedure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_dispatch_cards_event>
          nextitem: <Function test_received_turn_to_next_player_deal_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_in_game_procedure.py::test_received_dispatch_cards_event
            location: ('procedures\\test_in_game_procedure.py', 12, 'test_received_dispatch_cards_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_dispatch_cards_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='inGameProcedure' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'inGameProcedure' for <Function test_received_dispatch_cards_event>>
          finish pytest_fixture_setup --> <procedures.in_game_procedure.InGameProcedure object at 0x00000245434E9E48> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_received_dispatch_cards_event>>
          finish pytest_fixture_setup --> <procedures.client_events.DispatchCardsEvent object at 0x00000245434E9EF0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_dispatch_cards_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_dispatch_cards_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_dispatch_cards_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_dispatch_cards_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_dispatch_cards_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_dispatch_cards_event>
        pytest_runtest_makereport [hook]
            item: <Function test_received_dispatch_cards_event>
            call: <CallInfo when='call' exception: 'cards'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_dispatch_cards_event' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_dispatch_cards_event' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_dispatch_cards_event' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_dispatch_cards_event>
            call: <CallInfo when='call' exception: 'cards'>
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_dispatch_cards_event' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_dispatch_cards_event>
            nextitem: <Function test_received_turn_to_next_player_deal_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_received_dispatch_cards_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='inGameProcedure' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'inGameProcedure' for <Function test_received_dispatch_cards_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_dispatch_cards_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_dispatch_cards_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_dispatch_cards_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_dispatch_cards_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_in_game_procedure.py::test_received_dispatch_cards_event
            location: ('procedures\\test_in_game_procedure.py', 12, 'test_received_dispatch_cards_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_turn_to_next_player_deal_event>
          nextitem: <Function test_received_pass_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event
            location: ('procedures\\test_in_game_procedure.py', 16, 'test_received_turn_to_next_player_deal_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_turn_to_next_player_deal_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='inGameProcedure' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'inGameProcedure' for <Function test_received_turn_to_next_player_deal_event>>
          finish pytest_fixture_setup --> <procedures.in_game_procedure.InGameProcedure object at 0x00000245434E49E8> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_received_turn_to_next_player_deal_event>>
          finish pytest_fixture_setup --> <procedures.client_events.DispatchCardsEvent object at 0x00000245434E4C50> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='turnToNextPlayerDealEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'turnToNextPlayerDealEvent' for <Function test_received_turn_to_next_player_deal_event>>
          finish pytest_fixture_setup --> <procedures.client_events.TurnToNextPlayerDealEvent object at 0x00000245434E4D30> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_turn_to_next_player_deal_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_turn_to_next_player_deal_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_turn_to_next_player_deal_event>
        pytest_runtest_makereport [hook]
            item: <Function test_received_turn_to_next_player_deal_event>
            call: <CallInfo when='call' exception: 'cards'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_turn_to_next_player_deal_event>
            call: <CallInfo when='call' exception: 'cards'>
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_turn_to_next_player_deal_event>
            nextitem: <Function test_received_pass_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='turnToNextPlayerDealEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'turnToNextPlayerDealEvent' for <Function test_received_turn_to_next_player_deal_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_received_turn_to_next_player_deal_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='inGameProcedure' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'inGameProcedure' for <Function test_received_turn_to_next_player_deal_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_turn_to_next_player_deal_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_in_game_procedure.py::test_received_turn_to_next_player_deal_event
            location: ('procedures\\test_in_game_procedure.py', 16, 'test_received_turn_to_next_player_deal_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_pass_event>
          nextitem: <Function test_received_deal_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_in_game_procedure.py::test_received_pass_event
            location: ('procedures\\test_in_game_procedure.py', 21, 'test_received_pass_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_pass_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='inGameProcedure' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'inGameProcedure' for <Function test_received_pass_event>>
          finish pytest_fixture_setup --> <procedures.in_game_procedure.InGameProcedure object at 0x00000245434E7898> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_received_pass_event>>
          finish pytest_fixture_setup --> <procedures.client_events.DispatchCardsEvent object at 0x00000245434E7780> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='turnToNextPlayerDealEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'turnToNextPlayerDealEvent' for <Function test_received_pass_event>>
          finish pytest_fixture_setup --> <procedures.client_events.TurnToNextPlayerDealEvent object at 0x00000245434E7400> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='passEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'passEvent' for <Function test_received_pass_event>>
          finish pytest_fixture_setup --> <procedures.client_events.PassEvent object at 0x00000245434E7320> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_pass_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_pass_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_pass_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_pass_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_pass_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_pass_event>
        pytest_runtest_makereport [hook]
            item: <Function test_received_pass_event>
            call: <CallInfo when='call' exception: 'cards'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_pass_event' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_pass_event' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_pass_event' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_pass_event>
            call: <CallInfo when='call' exception: 'cards'>
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_pass_event' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_pass_event>
            nextitem: <Function test_received_deal_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='passEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'passEvent' for <Function test_received_pass_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='turnToNextPlayerDealEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'turnToNextPlayerDealEvent' for <Function test_received_pass_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_received_pass_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='inGameProcedure' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'inGameProcedure' for <Function test_received_pass_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_pass_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_pass_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_pass_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_pass_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_in_game_procedure.py::test_received_pass_event
            location: ('procedures\\test_in_game_procedure.py', 21, 'test_received_pass_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_deal_event>
          nextitem: <Function test_received_deal_timeout_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_in_game_procedure.py::test_received_deal_event
            location: ('procedures\\test_in_game_procedure.py', 27, 'test_received_deal_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_deal_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='inGameProcedure' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'inGameProcedure' for <Function test_received_deal_event>>
          finish pytest_fixture_setup --> <procedures.in_game_procedure.InGameProcedure object at 0x000002454347DEF0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_received_deal_event>>
          finish pytest_fixture_setup --> <procedures.client_events.DispatchCardsEvent object at 0x000002454347DB00> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='turnToNextPlayerDealEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'turnToNextPlayerDealEvent' for <Function test_received_deal_event>>
          finish pytest_fixture_setup --> <procedures.client_events.TurnToNextPlayerDealEvent object at 0x000002454347DC88> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dealEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dealEvent' for <Function test_received_deal_event>>
          finish pytest_fixture_setup --> <procedures.client_events.DealEvent object at 0x000002454347DD30> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_deal_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_deal_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_deal_event>
        pytest_runtest_makereport [hook]
            item: <Function test_received_deal_event>
            call: <CallInfo when='call' exception: 'cards'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_event' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_event' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_event' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_deal_event>
            call: <CallInfo when='call' exception: 'cards'>
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_event' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_deal_event>
            nextitem: <Function test_received_deal_timeout_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dealEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dealEvent' for <Function test_received_deal_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='turnToNextPlayerDealEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'turnToNextPlayerDealEvent' for <Function test_received_deal_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_received_deal_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='inGameProcedure' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'inGameProcedure' for <Function test_received_deal_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_deal_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_in_game_procedure.py::test_received_deal_event
            location: ('procedures\\test_in_game_procedure.py', 27, 'test_received_deal_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_deal_timeout_event>
          nextitem: <Function test_received_replay_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_in_game_procedure.py::test_received_deal_timeout_event
            location: ('procedures\\test_in_game_procedure.py', 33, 'test_received_deal_timeout_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_deal_timeout_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='inGameProcedure' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'inGameProcedure' for <Function test_received_deal_timeout_event>>
          finish pytest_fixture_setup --> <procedures.in_game_procedure.InGameProcedure object at 0x00000245434EEA20> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_received_deal_timeout_event>>
          finish pytest_fixture_setup --> <procedures.client_events.DispatchCardsEvent object at 0x00000245434EE7F0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='turnToNextPlayerDealEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'turnToNextPlayerDealEvent' for <Function test_received_deal_timeout_event>>
          finish pytest_fixture_setup --> <procedures.client_events.TurnToNextPlayerDealEvent object at 0x00000245434EE4E0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dealTimeoutEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dealTimeoutEvent' for <Function test_received_deal_timeout_event>>
        pytest_runtest_makereport [hook]
            item: <Function test_received_deal_timeout_event>
            call: <CallInfo when='setup' exception: name 'DealTimeoutEvent' is not defined>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_timeout_event' when='setup' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_timeout_event' when='setup' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_timeout_event' when='setup' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('error', 'E', 'ERROR') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_deal_timeout_event>
            call: <CallInfo when='setup' exception: name 'DealTimeoutEvent' is not defined>
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_timeout_event' when='setup' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_deal_timeout_event>
            nextitem: <Function test_received_replay_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dealTimeoutEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dealTimeoutEvent' for <Function test_received_deal_timeout_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='turnToNextPlayerDealEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'turnToNextPlayerDealEvent' for <Function test_received_deal_timeout_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dispatchCardsEvent' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'dispatchCardsEvent' for <Function test_received_deal_timeout_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='inGameProcedure' scope='function' baseid='procedures/test_in_game_procedure.py'>
              request: <SubRequest 'inGameProcedure' for <Function test_received_deal_timeout_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_deal_timeout_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_timeout_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_timeout_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_in_game_procedure.py::test_received_deal_timeout_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_in_game_procedure.py::test_received_deal_timeout_event
            location: ('procedures\\test_in_game_procedure.py', 33, 'test_received_deal_timeout_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_replay_event>
          nextitem: <Function test_received_one_player_ready_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_post_game_procedure.py::test_received_replay_event
            location: ('procedures\\test_post_game_procedure.py', 11, 'test_received_replay_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_replay_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='postGameProcedure' scope='function' baseid='procedures/test_post_game_procedure.py'>
              request: <SubRequest 'postGameProcedure' for <Function test_received_replay_event>>
          finish pytest_fixture_setup --> <procedures.post_game_procedure.PostGameProcedure object at 0x00000245434E7208> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='replayEvent' scope='function' baseid='procedures/test_post_game_procedure.py'>
              request: <SubRequest 'replayEvent' for <Function test_received_replay_event>>
          finish pytest_fixture_setup --> <procedures.client_events.ReplayEvent object at 0x00000245434E7BE0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_replay_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_post_game_procedure.py::test_received_replay_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_post_game_procedure.py::test_received_replay_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_post_game_procedure.py::test_received_replay_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_replay_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_replay_event>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_replay_event>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_post_game_procedure.py::test_received_replay_event' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_post_game_procedure.py::test_received_replay_event' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_post_game_procedure.py::test_received_replay_event' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_replay_event>
            nextitem: <Function test_received_one_player_ready_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='replayEvent' scope='function' baseid='procedures/test_post_game_procedure.py'>
              request: <SubRequest 'replayEvent' for <Function test_received_replay_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='postGameProcedure' scope='function' baseid='procedures/test_post_game_procedure.py'>
              request: <SubRequest 'postGameProcedure' for <Function test_received_replay_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_replay_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_post_game_procedure.py::test_received_replay_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_post_game_procedure.py::test_received_replay_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_post_game_procedure.py::test_received_replay_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_post_game_procedure.py::test_received_replay_event
            location: ('procedures\\test_post_game_procedure.py', 11, 'test_received_replay_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_one_player_ready_event>
          nextitem: <Function test_received_one_player_not_ready_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_pre_game_procedure.py::test_received_one_player_ready_event
            location: ('procedures\\test_pre_game_procedure.py', 11, 'test_received_one_player_ready_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_one_player_ready_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pregameProcedure' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'pregameProcedure' for <Function test_received_one_player_ready_event>>
          finish pytest_fixture_setup --> <procedures.pre_game_procedure.PreGameProcedure object at 0x00000245434E79E8> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='onePlayerReadyEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerReadyEvent' for <Function test_received_one_player_ready_event>>
          finish pytest_fixture_setup --> <procedures.client_events.OnePlayerReadyEvent object at 0x00000245434E7A58> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_ready_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_ready_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_ready_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_ready_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_one_player_ready_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_one_player_ready_event>
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_ready_event>
            call: <CallInfo when='call' exception: 'server'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_ready_event' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_ready_event' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_ready_event' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_one_player_ready_event>
            call: <CallInfo when='call' exception: 'server'>
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_ready_event' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_one_player_ready_event>
            nextitem: <Function test_received_one_player_not_ready_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='onePlayerReadyEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerReadyEvent' for <Function test_received_one_player_ready_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pregameProcedure' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'pregameProcedure' for <Function test_received_one_player_ready_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_ready_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_ready_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_ready_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_ready_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_pre_game_procedure.py::test_received_one_player_ready_event
            location: ('procedures\\test_pre_game_procedure.py', 11, 'test_received_one_player_ready_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_one_player_not_ready_event>
          nextitem: <Function test_received_one_player_join_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event
            location: ('procedures\\test_pre_game_procedure.py', 18, 'test_received_one_player_not_ready_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_one_player_not_ready_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pregameProcedure' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'pregameProcedure' for <Function test_received_one_player_not_ready_event>>
          finish pytest_fixture_setup --> <procedures.pre_game_procedure.PreGameProcedure object at 0x00000245434FFE80> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='onePlayerReadyEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerReadyEvent' for <Function test_received_one_player_not_ready_event>>
          finish pytest_fixture_setup --> <procedures.client_events.OnePlayerReadyEvent object at 0x00000245434FFEB8> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='onePlayerNotReadyEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerNotReadyEvent' for <Function test_received_one_player_not_ready_event>>
          finish pytest_fixture_setup --> <procedures.client_events.OnePlayerNotReadyEvent object at 0x00000245434FFEF0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_not_ready_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_one_player_not_ready_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_one_player_not_ready_event>
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_not_ready_event>
            call: <CallInfo when='call' exception: 'server'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_one_player_not_ready_event>
            call: <CallInfo when='call' exception: 'server'>
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_one_player_not_ready_event>
            nextitem: <Function test_received_one_player_join_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='onePlayerNotReadyEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerNotReadyEvent' for <Function test_received_one_player_not_ready_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='onePlayerReadyEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerReadyEvent' for <Function test_received_one_player_not_ready_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pregameProcedure' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'pregameProcedure' for <Function test_received_one_player_not_ready_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_not_ready_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_pre_game_procedure.py::test_received_one_player_not_ready_event
            location: ('procedures\\test_pre_game_procedure.py', 18, 'test_received_one_player_not_ready_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_one_player_join_event>
          nextitem: <Function test_received_one_player_leave_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_pre_game_procedure.py::test_received_one_player_join_event
            location: ('procedures\\test_pre_game_procedure.py', 24, 'test_received_one_player_join_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_one_player_join_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pregameProcedure' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'pregameProcedure' for <Function test_received_one_player_join_event>>
          finish pytest_fixture_setup --> <procedures.pre_game_procedure.PreGameProcedure object at 0x000002454351D9E8> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='onePlayerJoinEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerJoinEvent' for <Function test_received_one_player_join_event>>
          finish pytest_fixture_setup --> <procedures.client_events.OnePlayerJoinEvent object at 0x000002454351D278> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_join_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_join_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_join_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_join_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_one_player_join_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_one_player_join_event>
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_join_event>
            call: <CallInfo when='call' exception: 'server'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_join_event' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_join_event' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_join_event' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_one_player_join_event>
            call: <CallInfo when='call' exception: 'server'>
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_join_event' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_one_player_join_event>
            nextitem: <Function test_received_one_player_leave_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='onePlayerJoinEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerJoinEvent' for <Function test_received_one_player_join_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pregameProcedure' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'pregameProcedure' for <Function test_received_one_player_join_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_join_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_join_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_join_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_join_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_pre_game_procedure.py::test_received_one_player_join_event
            location: ('procedures\\test_pre_game_procedure.py', 24, 'test_received_one_player_join_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_one_player_leave_event>
          nextitem: <Function test_received_all_players_ready_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_pre_game_procedure.py::test_received_one_player_leave_event
            location: ('procedures\\test_pre_game_procedure.py', 30, 'test_received_one_player_leave_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_one_player_leave_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pregameProcedure' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'pregameProcedure' for <Function test_received_one_player_leave_event>>
          finish pytest_fixture_setup --> <procedures.pre_game_procedure.PreGameProcedure object at 0x00000245434A2588> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='onePlayerLeaveEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerLeaveEvent' for <Function test_received_one_player_leave_event>>
          finish pytest_fixture_setup --> <procedures.client_events.OnePlayerLeaveEvent object at 0x00000245434A25F8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_leave_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_leave_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_leave_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_leave_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_one_player_leave_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_one_player_leave_event>
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_leave_event>
            call: <CallInfo when='call' exception: 'server'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_leave_event' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_leave_event' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_leave_event' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_one_player_leave_event>
            call: <CallInfo when='call' exception: 'server'>
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_leave_event' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_one_player_leave_event>
            nextitem: <Function test_received_all_players_ready_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='onePlayerLeaveEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerLeaveEvent' for <Function test_received_one_player_leave_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pregameProcedure' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'pregameProcedure' for <Function test_received_one_player_leave_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_one_player_leave_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_leave_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_leave_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_one_player_leave_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_pre_game_procedure.py::test_received_one_player_leave_event
            location: ('procedures\\test_pre_game_procedure.py', 30, 'test_received_one_player_leave_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_all_players_ready_event>
          nextitem: <Function test_received_enter_room_event>
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_pre_game_procedure.py::test_received_all_players_ready_event
            location: ('procedures\\test_pre_game_procedure.py', 36, 'test_received_all_players_ready_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_all_players_ready_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pregameProcedure' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'pregameProcedure' for <Function test_received_all_players_ready_event>>
          finish pytest_fixture_setup --> <procedures.pre_game_procedure.PreGameProcedure object at 0x00000245434C9780> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='onePlayerJoinEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerJoinEvent' for <Function test_received_all_players_ready_event>>
          finish pytest_fixture_setup --> <procedures.client_events.OnePlayerJoinEvent object at 0x00000245434C9B00> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='allPlayersReadyEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'allPlayersReadyEvent' for <Function test_received_all_players_ready_event>>
          finish pytest_fixture_setup --> <procedures.client_events.AllPlayersReadyEvent object at 0x00000245434C95C0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_all_players_ready_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_all_players_ready_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_all_players_ready_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_all_players_ready_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_all_players_ready_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_all_players_ready_event>
        pytest_runtest_makereport [hook]
            item: <Function test_received_all_players_ready_event>
            call: <CallInfo when='call' exception: 'server'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_all_players_ready_event' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_all_players_ready_event' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_all_players_ready_event' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_all_players_ready_event>
            call: <CallInfo when='call' exception: 'server'>
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_all_players_ready_event' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_all_players_ready_event>
            nextitem: <Function test_received_enter_room_event>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='allPlayersReadyEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'allPlayersReadyEvent' for <Function test_received_all_players_ready_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='onePlayerJoinEvent' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'onePlayerJoinEvent' for <Function test_received_all_players_ready_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pregameProcedure' scope='function' baseid='procedures/test_pre_game_procedure.py'>
              request: <SubRequest 'pregameProcedure' for <Function test_received_all_players_ready_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_all_players_ready_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_pre_game_procedure.py::test_received_all_players_ready_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_all_players_ready_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_pre_game_procedure.py::test_received_all_players_ready_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_pre_game_procedure.py::test_received_all_players_ready_event
            location: ('procedures\\test_pre_game_procedure.py', 36, 'test_received_all_players_ready_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_received_enter_room_event>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event
            location: ('procedures\\test_wait_room_choose_procedure.py', 10, 'test_received_enter_room_event')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_received_enter_room_event>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='waitRoomChooseProcedure' scope='function' baseid='procedures/test_wait_room_choose_procedure.py'>
              request: <SubRequest 'waitRoomChooseProcedure' for <Function test_received_enter_room_event>>
          finish pytest_fixture_setup --> <procedures.wait_room_choose_procedure.WaitRoomChooseProcedure object at 0x00000245434E9CF8> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='enterRoomEvent' scope='function' baseid='procedures/test_wait_room_choose_procedure.py'>
              request: <SubRequest 'enterRoomEvent' for <Function test_received_enter_room_event>>
          finish pytest_fixture_setup --> <procedures.client_events.EnterRoomEvent object at 0x00000245434E9550> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_enter_room_event>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_received_enter_room_event>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_received_enter_room_event>
        pytest_runtest_makereport [hook]
            item: <Function test_received_enter_room_event>
            call: <CallInfo when='call' exception: 'server'>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_received_enter_room_event>
            call: <CallInfo when='call' exception: 'server'>
            report: <TestReport 'procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_received_enter_room_event>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='enterRoomEvent' scope='function' baseid='procedures/test_wait_room_choose_procedure.py'>
              request: <SubRequest 'enterRoomEvent' for <Function test_received_enter_room_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='waitRoomChooseProcedure' scope='function' baseid='procedures/test_wait_room_choose_procedure.py'>
              request: <SubRequest 'waitRoomChooseProcedure' for <Function test_received_enter_room_event>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_received_enter_room_event>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x0000024543256D30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: procedures/test_wait_room_choose_procedure.py::test_received_enter_room_event
            location: ('procedures\\test_wait_room_choose_procedure.py', 10, 'test_received_enter_room_event')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session ut exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=12 testscollected=16>
        exitstatus: ExitCode.TESTS_FAILED
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x00000245433A8E10>
          exitstatus: ExitCode.TESTS_FAILED
          config: <_pytest.config.Config object at 0x0000024543256D30>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x0000024543256D30>
    finish pytest_unconfigure --> [] [hook]
